pkgname=firefox-vaapi
_pkgname=firefox
pkgver=144.0
pkgrel=1
pkgdesc="Fast, Private & Safe Web Browser (with VA-API patches)"
url="https://www.mozilla.org/firefox/"
arch=(x86_64)
license=(MPL-2.0)
depends=(
  alsa-lib
  at-spi2-core
  bash
  cairo
  dbus
  ffmpeg4.4
  fontconfig
  freetype2
  gcc-libs
  gdk-pixbuf2
  glib2
  glibc
  gtk3
  hicolor-icon-theme
  libpulse
  libx11
  libxcb
  libxcomposite
  libxdamage
  libxext
  libxfixes
  libxrandr
  libxss
  libxt
  mime-types
  nspr
  nss
  pango
  ttf-font
)
depends=(gtk3 libxt mime-types dbus-glib ffmpeg nss ttf-font libpulse
		kplasmafoxhelper libvpx icu nspr dav1d aom harfbuzz graphite
		libwebp)
makedepends=('unzip' 'zip' 'diffutils' 'python-setuptools' 'python-psutil'
			 'python' 'yasm' 'mesa' 'imake' 'xorg-server-xvfb' 'libpulse'
			 'inetutils' 'autoconf2.13' 'rust' 'cargo' 'llvm' 'clang' 'gtk2' 'libevent'
			 'nodejs' 'cbindgen' 'nasm' 'zlib' 'lld' 'python-zstandard' 'dump_syms')
makedepends=(
  cbindgen
  clang
  diffutils
  imake
  jack
  lld
  llvm
  mesa
  nasm
  nodejs
  onnxruntime
  python
  rust
  unzip
  wasi-compiler-rt
  wasi-libc
  wasi-libc++
  wasi-libc++abi
  xorg-server-xvfb
  yasm
  zip
)
optdepends=('hunspell-en_US: Spell checking, American English'
            'libnotify: Notification integration'
            'networkmanager: Location detection via available WiFi networks'
            'onnxruntime: Local machine learning features such as smart tab groups'
            'speech-dispatcher: Text-to-Speech'
            'xdg-desktop-portal: Screensharing with Wayland'
            'libdbusmenu-gtk3: global menu support'
			'profile-sync-daemon: Load the browser profile into RAM')
provides=(firefox=${pkgver})
conflicts=(firefox)
options=(!emptydirs !makeflags !lto !debug !strip)
source=(
  https://archive.mozilla.org/pub/firefox/releases/$pkgver/source/firefox-$pkgver.source.tar.xz{,.asc}
  0001-remove-nvidia-blocklist.patch
)

prepare() {
  mkdir mozbuild
  cd firefox-$pkgver
  # set number of cores directly
  sed -i -e "s/multiprocessing.cpu_count()/$(nproc)/" build/moz.configure/lto-pgo.configure
  # Disable NVIDIA blocklists, to make it function with libva-nvidia-driver-git AUR package
  msg2 "Patching Nvidia blocklist"
  patch -Np1 -i ../0001-remove-nvidia-blocklist.patch
  echo -n "$_google_api_key" >google-api-key
  cat >../mozconfig <<END
BUILD_64=1
ac_add_options --disable-parental-controls
ac_add_options --disable-accessibility
ac_add_options --enable-unverified-updates
ac_add_options --with-unsigned-addon-scopes=app,system
ac_add_options --allow-addon-sideload

# Build options
ac_add_options --enable-application=browser
ac_add_options --disable-bootstrap
ac_add_options --disable-elf-hack
ac_add_options --enable-default-toolkit=cairo-gtk3-wayland
ac_add_options --enable-hardening
ac_add_options --enable-linker=mold
ac_add_options --enable-64bit
ac_add_options --enable-lto=full
ac_add_options MOZ_LTO=1
export MOZ_LTO=1
ac_add_options --enable-minify
ac_add_options --enable-release
ac_add_options --enable-clang-plugin
ac_add_options --enable-rust-simd
ac_add_options --enable-wasm-simd
ac_add_options --prefix=/usr
ac_add_options --with-wasi-sysroot=/usr/share/wasi-sysroot
mk_add_options AUTOCLOBBER=1
export AUTOCLOBBER=1
export MOZ_INCLUDE_SOURCE_INFO=1
export MOZILLA_OFFICIAL=1
export MOZ_CRASHREPORTER=
export MOZ_DATA_REPORTING=
export MOZ_REQUIRE_SIGNING=
mk_add_options MOZ_SERVICES_HEALTHREPORT=0
mk_add_options MOZ_ENABLE_WAYLAND=1
mk_add_options SGC_DISABLE_POISONING=1
mk_add_options MOZ_OPTIMIZE=1
mk_add_options MOZ_CRASHREPORTER=0
mk_add_options MOZ_DATA_REPORTING=0
mk_add_options MOZ_SERVICES_HEALTHREPORT=0
mk_add_options MOZ_TELEMETRY_REPORTING=0
export MOZ_TELEMETRY_REPORTING=
# System libraries
ac_add_options --with-system-jpeg
ac_add_options --with-system-libevent
ac_add_options --with-system-libvpx
ac_add_options --with-system-nspr
ac_add_options --with-system-nss
ac_add_options --with-system-webp
ac_add_options --with-system-png
ac_add_options --with-system-zlib # zlib-ng
# Features
ac_add_options --disable-crashreporter
ac_add_options --disable-debug
ac_add_options --disable-debug-js-modules
ac_add_options --disable-debug-symbols
ac_add_options --disable-default-browser-agent
ac_add_options --disable-gpsd
ac_add_options --disable-necko-wifi
ac_add_options --disable-parental-controls # (Disable local/OS MTIM)
ac_add_options --disable-rust-tests
ac_add_options --disable-synth-speechd
ac_add_options --disable-tests
ac_add_options --disable-updater
ac_add_options --disable-warnings-as-errors
ac_add_options --disable-webspeech
ac_add_options --disable-webspeechtestbackend
ac_add_options --enable-alsa
ac_add_options --enable-av1
ac_add_options --enable-eme=widevine
ac_add_options --enable-jack
ac_add_options --enable-jxl
ac_add_options --enable-proxy-bypass-protection
ac_add_options --enable-sandbox
ac_add_options --enable-dbus
ac_add_options --enable-strip
export STRIP_FLAGS="--strip-debug --strip-unneeded"
# Optimization
ac_add_options --enable-optimize="-O3 -march=native -w -ffp-contract=fast -ftree-vectorize"
ac_add_options OPT_LEVEL="3"
ac_add_options RUSTC_OPT_LEVEL="3"
export OPT_LEVEL="3"
export RUSTC_OPT_LEVEL="3"
# Other
export AR=/usr/bin/llvm-ar
export CC=/usr/bin/clang
export CXX=/usr/bin/clang++
export NM=/usr/bin/llvm-nm
export RANLIB=/usr/bin/llvm-ranlib

ac_add_options --enable-jit
ac_add_options --wasm-no-experimental
ac_add_options --enable-wasm-gc
ac_add_options --enable-wasm-avx
ac_add_options --enable-wasm-simd
ac_add_options --enable-wasm-relaxed-simd
ac_add_options --enable-wasm-memory64
ac_add_options --enable-wasm-branch-hinting
ac_add_options --enable-shared-memory
ac_add_options --enable-webrender

ac_add_options --enable-forkserver
ac_add_options --enable-jemalloc
ac_add_options --enable-replace-malloc
ac_add_options --enable-strip
ac_add_options --with-ccache=sccache
mk_add_options MOZ_PARALLEL_COMPILE=1

ac_add_options --disable-gamepad
ac_add_options --disable-tests
ac_add_options --disable-debug
ac_add_options --disable-necko-wifi
ac_add_options --disable-updater
ac_add_options --disable-gconf
ac_add_options --with-pthreads

export MC_OFFICIAL=1
export MOZILLA_OFFICIAL=1
export MOZ_NOSPAM=1 MACH_USE_SYSTEM_PYTHON=1
export MOZ_ENABLE_FULL_SYMBOLS=1

ac_add_options --x-libraries=/usr/lib

# Floop
ac_add_options --disable-icu4x
ac_add_options --enable-clang-plugin
ac_add_options --enable-compile-environment
export MOZ_SYSTEM_ZLIB=1
export MOZ_PACKAGE_JSSHELL=1
ac_add_options --disable-crashreporter
ac_add_options --enable-official-branding
ac_add_options --disable-nodejs
ac_add_options --as-milestone=release

# https://github.com/BrowserWorks/waterfox/blob/current/docs/performance/jit_profiling_with_perf.md
ac_add_options MOZ_PGO=1
if test "$GEN_PGO"; then
    ac_add_options --enable-profile-generate
    export IONPERF=ir PERF_SPEW_DIR=output MOZ_DISABLE_CONTENT_SANDBOX=1
elif test "$USE_PGO"; then
    ac_add_options --enable-profile-use=cross
fi
export VERBOSE=1
export CFLAGS="-O3 -ffp-contract=fast -march=x86-64-v3"
export CPPFLAGS="-O3 -ffp-contract=fast -march=x86-64-v3"
export CXXFLAGS="-O3 -ffp-contract=fast -march=x86-64-v3"
export LDFLAGS="-Wl,-O3 -Wl,-mllvm,-fp-contract=fast -march=x86-64-v3"
export RUSTFLAGS="-C target-cpu=x86-64-v3 -C target-feature=+avx2 -C codegen-units=1"
export POLLY="-mllvm -polly -mllvm -polly-2nd-level-tiling -mllvm -polly-loopfusion-greedy -mllvm -polly-pattern-matching-based-opts -mllvm -polly-position=before-vectorizer -mllvm -polly-vectorizer=stripmine"
END
}

build() {
  export MOZ_ENABLE_FULL_SYMBOLS=1
  export MOZ_NOSPAM=1
  export MOZ_BUILD_DATE="$(date -u${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH} +%Y%m%d%H%M%S)"
  export MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE=pip
  export MOZBUILD_STATE_PATH="$srcdir/mozbuild"
  export MOZ_PROFILER_STARTUP=1 # Starts the profiler is started as early as possible during startup.
  # Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1969383
  export RUST_MIN_STACK=16777216
  # Fix DRI/zink issues during compilation
  export LIBGL_ALWAYS_SOFTWARE=true
  # Malloc_usable_size is used in various parts of the codebase
  CFLAGS="${CFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=2}"
  CXXFLAGS="${CXXFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=2}"
  # Breaks compilation since https://bugzilla.mozilla.org/show_bug.cgi?id=1896066
  CFLAGS="${CFLAGS/-fexceptions/}"
  CXXFLAGS="${CXXFLAGS/-fexceptions/}"
  # LTO needs more open files
  ulimit -n 4096
  # Do 3-tier PGO
  if [[ "${_build_pgo::1}" == "t" ]]; then
    local _old_profdata="${SRCDEST:-$startdir}/merged.profdata"
    local _old_jarlog="${SRCDEST:-$startdir}/jarlog"
    # Restore old profile
    if [[ "${_build_pgo_reuse::1}" == "t" ]]; then
      if [[ -s "$_old_profdata" ]]; then
        echo "Restoring old profile data."
        cp --reflink=auto -f "$_old_profdata" merged.profdata
      fi
      if [[ -s "$_old_jarlog" ]]; then
        echo "Restoring old jar log."
        cp --reflink=auto -f "$_old_jarlog" jarlog
      fi
    fi
    # Make new profile
    if [[ "${_build_pgo_reuse::1}" != "t" ]] || [[ ! -s merged.profdata ]]; then
      echo "Building instrumented browser..."
      cat >.mozconfig ../mozconfig
      echo >>.mozconfig "ac_add_options --enable-profile-generate=cross"
      ./mach build
      echo "Profiling instrumented browser..."
      ./mach package
      if [[ "${_build_pgo_xvfb::1}" == "t" ]]; then
        local _headless_run=(xvfb-run -s "-screen 0 1920x1080x24 -nolisten local")
      else
        local _headless_run=(wlheadless-run -c weston --width=1920 --height=1080)
      fi
      LLVM_PROFDATA=llvm-profdata JARLOG_FILE=${PWD@Q}/jarlog \
        "${_headless_run[@]}" -- ./mach python build/pgo/profileserver.py
      echo "Removing instrumented browser..."
      ./mach clobber
    fi
    echo "Building optimized browser..."
    cat >.mozconfig ../mozconfig
    if [[ -s merged.profdata ]]; then
      stat -c "Profile data found (%s bytes)" merged.profdata
      echo >>.mozconfig "ac_add_options --enable-profile-use=cross"
      echo >>.mozconfig "ac_add_options --with-pgo-profile-path='${PWD@Q}/merged.profdata'"
      # save profdata for reuse
      cp --reflink=auto -f merged.profdata "$_old_profdata"
    else
      echo "Profile data not found."
    fi
    if [[ -s jarlog ]]; then
      stat -c "Jar log found (%s bytes)" jarlog
      echo >>.mozconfig "ac_add_options --with-pgo-jarlog='${PWD@Q}/jarlog'"
      # save jarlog for reuse
      cp --reflink=auto -f jarlog "$_old_jarlog"
    else
      echo "Jar log not found."
    fi
    ./mach build
  else
    echo "Building browser..."
    cat >.mozconfig ../mozconfig
    ./mach build
  fi
  echo "Building symbol archive..."
  ./mach buildsymbols
  echo "Packaging browser with locales..."
  ./mach package
  ./mach package-multi-locale --locales de en-US en-GB
}

package() {
  cd firedragon-source-v"${_pkgver}" || exit

  DESTDIR="$pkgdir" ./mach install

  install -Ddvm755 "${pkgdir}/usr/bin"
  ln -srfv "$pkgdir/usr/lib/${pkgname}/${pkgname}" "$pkgdir/usr/bin/${pkgname}"

  local vendorjs="${pkgdir}/usr/lib/${pkgname}/browser/defaults/preferences/vendor.js"
  install -Dvm644 /dev/stdin "${vendorjs}" << END
// Use LANG environment variable to choose locale
pref("intl.locale.requested", "");

// Use system-provided dictionaries
pref("spellchecker.dictionary_path", "/usr/share/hunspell");

// Disable default browser checking.
pref("browser.shell.checkDefaultBrowser", false);

// Don't disable extensions in the application directory
pref("extensions.autoDisableScopes", 11);

// Enable GNOME Shell search provider
pref("browser.gnome-search-provider.enabled", true);
END

  local distini="${pkgdir}/usr/lib/${pkgname}/distribution/distribution.ini"
  install -Dvm644 /dev/stdin "${distini}" << END
[Global]
id=${pkgname}
version=${pkgver}-${pkgrel}
about=${pkgdesc}

[Preferences]
app.distributor=garudalinux
app.distributor.channel=${pkgname}
app.partner.garudalinux=garudalinux
END

  # Make native messaging work
  ln -s "/usr/lib/mozilla/native-messaging-hosts" "${pkgdir}/usr/lib/${pkgname}/native-messaging-hosts"

  # GNOME search provider
  local sprovider="$pkgdir/usr/share/gnome-shell/search-providers/$pkgname.search-provider.ini"
  install -Dvm644 /dev/stdin "$sprovider" << END
[Shell Search Provider]
DesktopId=$pkgname.desktop
BusName=org.mozilla.${pkgname//-/}.SearchProvider
ObjectPath=/org/mozilla/${pkgname//-/}/SearchProvider
Version=2
END

  # Application icons
  for i in 16 32 48 64 128; do
    install -Dvm644 browser/branding/firedragon/default$i.png \
      "${pkgdir}/usr/share/icons/hicolor/${i}x${i}/apps/${pkgname}.png"
  done
  install -Dvm644 browser/branding/firedragon/content/about-logo.png \
    "${pkgdir}/usr/share/icons/hicolor/192x192/apps/${pkgname}.png"

  # Replace duplicate binary with wrapper
  # https://bugzilla.mozilla.org/show_bug.cgi?id=658850
  ln -srfv "$pkgdir/usr/bin/$pkgname" "$pkgdir/usr/lib/$pkgname/${pkgname%-*}-bin"

  # All the needed configuration files
  install -Dvm644 "firedragon/assets/${pkgname}.desktop" "${pkgdir}/usr/share/applications/${pkgname}.desktop"
  install -Dvm644 "${srcdir}/firedragon.psd" "${pkgdir}/usr/share/psd/browsers/firedragon"
}
