pkgname=firefox-custom
_pkgname=firefox
provides=(firefox=${pkgver})
conflicts=(firefox)
pkgver=stable
pkgrel=1
pkgdesc='Firefox optimized'
arch=(x86_64)
url="https://mozilla.org/firefox"
license=(MPL)
depends=('dbus-glib' 'gtk3' 'alsa-lib' 'nss' 'nspr' 'libstdc++' 'libxcomposite' 'libxrandr' 'pango' 'dav1d' 'aom' 'icu' 'graphite' 'libwebp' 'libxt')
makedepends=('git' 'clang' 'lld' 'cmake' 'rust' 'cargo' 'ninja' 'python3' 'zip' 'unzip' 'autoconf2.13' 'clang-tools-extra' 'llvm' 'llvm-tools bindgen'
             'cargo-make' 'pkg-config' 'gtk-doc' 'sed' 'grep' 'file')
optdepends=('hunspell-en_US: Spell checking, American English'
            'libnotify: Notification integration'
            'networkmanager: Location detection via available WiFi networks'
            'onnxruntime: Local machine learning features such as smart tab groups'
            'speech-dispatcher: Text-to-Speech'
            'xdg-desktop-portal: Screensharing with Wayland'
            'libdbusmenu-gtk3: global menu support'
			      'profile-sync-daemon: Load the browser profile into RAM')
backup=()
options=(!strip !emptydirs !debug !makeflags !lto)

# git source. makepkg supports git+ URLs.
source=(
  # "git+https://github.com/mozilla/gecko-dev.git#branch=mozilla-release"
  "https://archive.mozilla.org/pub/firefox/releases/$pkgver/source/firefox-$pkgver.source.tar.xz{,.asc}"
)
sha256sums=('SKIP')

# Tunables:
# ENABLE_PGO=1  -> run PGO (two-stage). You should run the instrumented build, exercise the browser to generate profiles, then rebuild.
# ENABLE_BOLT=1 -> run llvm-bolt pass (requires llvm-bolt available in PATH)
# ENABLE_POLLY=1 -> enable polly compiler passes where feasible
# NATIVE_ARCH -> defaults to x86-64-v3
: "${NATIVE_ARCH:=x86-64-v3}"

# Build flags as arrays
_cflags=( -O3 -march=${NATIVE_ARCH} -mtune=native -fomit-frame-pointer -ffunction-sections -fdata-sections )
_cppflags=( "${_cflags[@]}" )
_ldflags=( -Wl,-O1 -Wl,--gc-sections -flto -fuse-linker-plugin -Wl,-plugin-opt=emit-llvm )
_rustflags=( -C target-cpu=native -C opt-level=3 -C lto -C codegen-units=1 )

prepare() {
  cd "$srcdir"/gecko-dev || return 1
  git reset --hard
  git submodule update --init --recursive
}

# write a compact mozconfig to target minimal features
_write_mozconfig() {
  cat >.mozconfig <<'EOF'
ac_add_options --enable-optimize
ac_add_options --enable-release
ac_add_options --disable-debug
ac_add_options --disable-crashreporter
ac_add_options --disable-updater
ac_add_options --disable-sandbox
ac_add_options --disable-tests
ac_add_options --disable-installer
ac_add_options --disable-maintenance-service
ac_add_options --disable-websockets
ac_add_options --disable-client-telemetry
ac_add_options --disable-crashreporter
ac_add_options --disable-health-report
ac_add_options --enable-system-ffi
ac_add_options --with-system-nspr
ac_add_options --with-system-nss
ac_add_options --enable-default-toolkit=cairo-gtk3
ac_add_options --enable-wayland
mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/obj-firefox

ac_add_options --with-unsigned-addon-scopes=app,system
ac_add_options --allow-addon-sideload

export MOZ_NO_PIE_COMPAT=1
EOF
}

build() {
  cd "$srcdir"/gecko-dev || return 1

  _write_mozconfig

  # environment
  export CC=clang
  export CXX=clang++
  export AR=llvm-ar
  export NM=llvm-nm
  export RANLIB=llvm-ranlib
  export LD=lld

  export CFLAGS="${_cflags[*]} ${CFLAGS:-}"
  export CXXFLAGS="${_cppflags[*]} ${CXXFLAGS:-}"
  export LDFLAGS="${_ldflags[*]} ${LDFLAGS:-}"
  export RUSTFLAGS="${_rustflags[*]} ${RUSTFLAGS:-}"

  # Polly/Propeller opt-in
  if [[ -n "${ENABLE_POLLY:-}" ]]; then
    export CFLAGS+=" -mllvm -polly -mllvm -polly-vectorizer=stripmine"
    export CXXFLAGS+=" -mllvm -polly -mllvm -polly-vectorizer=stripmine"
  fi

  # PGO instrumentation build
  if [[ -n "${ENABLE_PGO:-}" ]]; then
    export CFLAGS+=" -fprofile-generate=profile_data"
    export CXXFLAGS+=" -fprofile-generate=profile_data"
    export RUSTFLAGS+=" -C profile-generate=profile_data"
    echo "PGO: instrumented build. After this completes, run the browser to generate profiles, then rebuild with ENABLE_PGO=use"
  fi

  # configure / build via mach
  ./mach bootstrap --no-interactive --application-choice=browser || true
  ./mach build || return 1

  # If running BOLT rewriting is requested and llvm-bolt exists, run on the main binaries
  if [[ -n "${ENABLE_BOLT:-}" ]] && command -v llvm-bolt >/dev/null 2>&1; then
    # collect target binaries
    objdir=./obj-firefox/dist
    for bin in "$objdir"/firefox "$objdir"/libxul.so; do
      [[ -f "$bin" ]] || continue
      # placeholder profile path; user should generate profile_data.prof by running instrumented binary
      prof=profile_data/merged.prof
      if [[ -f "$prof" ]]; then
        llvm-bolt "$bin" -o "${bin}.bolt" --data="$prof" || true
        mv -f "${bin}.bolt" "$bin" || true
      fi
    done
  fi

  # If PGO use-phase requested
  if [[ "${ENABLE_PGO:-}" == "use" ]]; then
    export CFLAGS="${_cflags[*]} -fprofile-use=profile_data -fprofile-correction"
    export CXXFLAGS="${_cppflags[*]} -fprofile-use=profile_data -fprofile-correction"
    export RUSTFLAGS="${_rustflags[*]} -C profile-use=profile_data"
    ./mach clobber || true
    ./mach build || return 1
  fi
}

package() {
  cd "$srcdir"/gecko-dev || return 1
  objdir=./obj-firefox/dist

  install -Dm755 "$objdir/firefox" "$pkgdir/usr/bin/firefox-custom"
  mkdir -p "$pkgdir/usr/lib/firefox-custom"
  cp -a "$objdir/"* "$pkgdir/usr/lib/firefox-custom/"

  # minimal desktop file
  install -Dm644 <<'DESK' "$pkgdir/usr/share/applications/firefox-custom.desktop"
[Desktop Entry]
Name=Firefox Custom
Exec=/usr/bin/firefox-custom %u
Terminal=false
Type=Application
Categories=Network;WebBrowser;
DESK

  # icons if present
  if [[ -d "$objdir/browser/branding/distribution/icons" ]]; then
    mkdir -p "$pkgdir/usr/share/icons/hicolor/128x128/apps"
    cp -a "$objdir/browser/branding/distribution/icons/*" "$pkgdir/usr/share/icons/hicolor/128x128/apps/" 2>/dev/null || true
  fi
}

# vim: ft=sh
