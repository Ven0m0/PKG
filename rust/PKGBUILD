# Maintainer: Johannes Löthberg <johannes@kyriasis.com>
# Maintainer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>
# Contributor: Alexander F Rødseth <xyproto@archlinux.org>
# Contributor: Daniel Micay <danielmicay@gmail.com>
# Contributor: userwithuid <userwithuid@gmail.com>
# PGO Version: Laio O. Seman <laio@ieee.org>
pkgbase=rust
pkgname=rust-opt
_pkgname=
pkgver=1.90.0
pkgrel=1
epoch=1
pkgdesc="Systems programming language focused on safety, speed and concurrency"
url=https://www.rust-lang.org/
arch=(x86_64)
license=(Apache MIT)
provides=('rust')
conflicts=('rust', 'rustup')
depends=(curl gcc gcc-libs libssh2 llvm-libs)
makedepends=(
  cmake ninja
  lib32-gcc-libs
  libffi
  lld llvm
  musl
  perl
  python
  rust
  wasi-libc
)
checkdepends=(gdb procps-ng)
source=(git+https://github.com/rust-lang/rust.git#tag=$pkgver)
validpgpkeys=(
  108F66205EAEB0AAA8DD5E1C85AB96E6FA1BE5FE  # Rust Language (Tag and Release Signing Key) <rust-key@rust-lang.org>
)

prepare() {
  cd rust

  cat >config.toml <<END
profile = 'dist'
changelog-seen = 2

[llvm]
thin-lto = true
ccache = 'ccache'
static-libstdcpp = true
ninja = true
cxxflags = "-march=native"
cflags = "-march=native"
libzstd = true
optimize = true
polly = true
clang = true
plugins = true

[build]
compiler-docs = false
submodules = true
locked-deps = true
extended = true
# Build the sanitizer runtimes
sanitizers = false
profiler = true
cargo-native-static = true
configure-args = ['--set', 'target.x86_64-unknown-linux-gnu.linker=clang', '--enable-ccache', '--disable-manage-submodules', '--set', 'dist.compression-profile=balanced', '--dist-compression-formats=xz', '--release-channel=nightly', '--enable-llvm-static-stdcpp', '--debuginfo-level-std=0', '--set', 'rust.codegen-backends=llvm']
target = [
  "x86_64-unknown-linux-gnu",
  "wasm32-unknown-unknown",
]
print-step-timings = true
metrics = true
# docs-minification = true
optimized-compiler-builtins = true
# ccache = true
sccache = true

[install]
prefix = "/usr"

[rust]
codegen-units = 1
codegen-units-std = 1
debuginfo-level = "line-tables-only"
remap-debuginfo = false
debug = false
channel = 'nightly'
codegen-backends = ['llvm']
lld = true
use-lld = true
llvm-tools = true
llvm-libunwind = true
llvm-bitcode-linker = true
jemalloc = true
lto = 'fat'
optimize = true
strip = true
frame-pointers = false
validate-mir-opts = 3
new-symbol-mangling = true
incremental = false

[target.x86_64-unknown-linux-gnu]
ar = 'llvm-ar'
ranlib = 'llvm-ranlib'
linker = 'clang'

[dist]
compression-formats = ['zstd']
compression-profile = 'balanced'
END
}

build() {
    cd rust && mkdir -p pgo
    export CC=clang CXX=clang++ CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=clang
    export HOSTS=x86_64-unknown-linux-gnu
    export PATH=$HOME/install/bin/:$PATH
    export CMAKE_BUILD_TYPE=Release

    python3 ./x.py build --set rust.debug=false opt-dist 
    ./build/$HOSTS/stage0-tools-bin/opt-dist local \
      --target-triple=$HOSTS --checkout-dir=$PWD --artifact-dir=$PWD/pgo \
      --skipped-tests=tests/assembly \
      --skipped-tests=tests/codegen \
      --skipped-tests=tests/codegen-units \
      --skipped-tests=tests/incremental \
      --skipped-tests=tests/mir-opt \
      --skipped-tests=tests/pretty \
      --skipped-tests=tests/run-pass-valgrind \
      --skipped-tests=tests/ui \
      --llvm-dir=$HOME/install/ -- python3 \
      ./x.py dist --host $HOSTS --target $HOSTS \
      --include-default-paths \
      build-manifest bootstrap
}

package_rust() {
  optdepends=(
    'gdb: rust-gdb script'
    'lldb: rust-lldb script'
  )
  echo $PWD
  cd rust/build/dist
  tar -xf rust-nightly-x86_64-unknown-linux-gnu.tar.xz
  echo $PWD
  cd rust-nightly-x86_64-unknown-linux-gnu
  ./install.sh --prefix=/opt/rust --destdir=$pkgdir
  #cp -a dest-rust/* "$pkgdir"
}
