# Maintainer: Levente Polyak <anthraxx[at]archlinux[dot]org>
# Maintainer: Giancarlo Razzolini <grazzolini@archlinux.org>
# Contributor:  Bart≈Çomiej Piotrowski <bpiotrowski@archlinux.org>
# Contributor: Allan McRae <allan@archlinux.org>
# Contributor: Aaron Griffin <aaron@archlinux.org>
# PGO Version: Laio Seman <laio [at] ieee.org>
pkgname=bash
_basever=5.2
_patchlevel=021
pkgver=${_basever}.${_patchlevel}
pkgrel=1
pkgdesc='The GNU Bourne Again shell'
arch=(x86_64)
license=(GPL)
url='https://www.gnu.org/software/bash/bash.html'
backup=(etc/bash.bash{rc,_logout} etc/skel/.bash{rc,_profile,_logout})
depends=(readline libreadline.so glibc ncurses)
optdepends=('bash-completion: for tab completion')
provides=('sh')
install=bash.install
source=(https://ftp.gnu.org/gnu/bash/bash-$_basever.tar.gz{,.sig}
    dot.bashrc
    dot.bash_profile
    dot.bash_logout
    system.bashrc
    system.bash_logout)
validpgpkeys=('7C0135FB088AAF6C66C650B9BB5869F064EA74AB') # Chet Ramey

if [[ $((10#${_patchlevel})) -gt 0 ]]; then
    for ((_p = 1; _p <= $((10#${_patchlevel})); _p++)); do
        source=(${source[@]} https://ftp.gnu.org/gnu/bash/bash-$_basever-patches/bash${_basever//./}-$(printf "%03d" $_p){,.sig})
    done
fi

prepare() {
    cd $pkgname-$_basever
    msg "Applying patches..."
    for ((_p = 1; _p <= $((10#${_patchlevel})); _p++)); do
        local patch="bash${_basever//./}-$(printf "%03d" $_p)"
        msg2 "applying patch ${patch}"
        patch -Np0 -i ../"${patch}"
    done
}

build() {
    cd $pkgname-$_basever
    # Speed up build
    MALLOC_CONF="thp:always,metadata_thp:always"

    _bashconfig=(-DDEFAULT_PATH_VALUE=\'\"/usr/local/sbin:/usr/local/bin:/usr/bin\"\'
        -DSTANDARD_UTILS_PATH=\'\"/usr/bin\"\'
        -DSYS_BASHRC=\'\"/etc/bash.bashrc\"\'
        -DSYS_BASH_LOGOUT=\'\"/etc/bash.bash_logout\"\'
        -DNON_INTERACTIVE_LOGIN_SHELLS)

    CFLAGS="${CFLAGS/-O2/-O3} -ffat-lto-objects"
    CFLAGS+=" -fno-semantic-interposition"
    CXXLAGS+=" -fno-semantic-interposition"
    export CFLAGS="${CFLAGS} ${_bashconfig[@]}"
    export CFLAGS="${CFLAGS} -fprofile-generate -fprofile-update=atomic -fprofile-partial-training"

    ./configure \
        --prefix=/usr \
        --with-curses \
        --enable-readline \
        --with-installed-readline \
        --without-bash-malloc \
        --disable-nls
    make
    make -C examples/loadables all others
    make -k check
    
    export CFLAGS="${CFLAGS//-fprofile-generate/}"
    export CFLAGS="${CFLAGS//-fprofile-update=atomic/}"
    export CFLAGS="${CFLAGS} -fprofile-use"

    make clean
    ./configure \
        --prefix=/usr \
        --with-curses \
        --enable-readline \
        --with-installed-readline \
        --without-bash-malloc \
        --disable-nls
        #--disable-profiling \ # Runtime profiling
        #--disable-rpath \
        #--disable-debugger
    make
}

check() {
    make -C $pkgname-$_basever check
}

package() {
    make -C $pkgname-$_basever DESTDIR="$pkgdir" install
    strip bash
    ln -s bash "$pkgdir/usr/bin/sh"
    ln -s bash "$pkgdir/usr/bin/rbash"

    # system-wide configuration files
    install -Dm644 system.bashrc "$pkgdir/etc/bash.bashrc"
    install -Dm644 system.bash_logout "$pkgdir/etc/bash.bash_logout"

    # user configuration file skeletons
    install -dm755 "$pkgdir/etc/skel/"
    install -m644 dot.bashrc "$pkgdir/etc/skel/.bashrc"
    install -m644 dot.bash_profile "$pkgdir/etc/skel/.bash_profile"
    install -m644 dot.bash_logout "$pkgdir/etc/skel/.bash_logout"
}
